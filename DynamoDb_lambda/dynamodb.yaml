Resources:
  dynamodbTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: 'year'
          AttributeType: 'N'
        - 
          AttributeName: 'title'
          AttributeType: 'S'  
      KeySchema:
        - 
          AttributeName: 'year'
          KeyType: 'HASH'
        - 
          AttributeName: 'title'
          KeyType: 'RANGE'          
      ProvisionedThroughput: 
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5' 
      TableName: 'Movies'

  lambdarole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:  # https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements.html 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: 
              Service: 
                - lambda.amazonaws.com 
            Action:                 #action must be declared
              - sts:AssumeRole
      Description: lambda role to query dynamodb
      ManagedPolicyArns: 
        - 
          arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: cf_documentdb
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - application-autoscaling:DescribeScalingPolicies
                  - cloudwatch:DescribeAlarmHistory
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:DescribeAlarmsForMetric
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:ListMetrics
                  - cloudwatch:GetMetricData
                  - datapipeline:DescribeObjects
                  - datapipeline:DescribePipelines
                  - datapipeline:GetPipelineDefinition
                  - datapipeline:ListPipelines
                  - datapipeline:QueryObjects
                  - dynamodb:BatchGetItem
                  - dynamodb:Describe*
                  - dynamodb:List*
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:PartiQLSelect
                  - dax:Describe*
                  - dax:List*
                  - dax:GetItem
                  - dax:BatchGetItem
                  - dax:Query
                  - dax:Scan
                  - ec2:DescribeVpcs
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                  - iam:GetRole
                  - iam:ListRoles
                  - kms:DescribeKey
                  - kms:ListAliases
                  - sns:ListSubscriptionsByTopic
                  - sns:ListTopics
                  - lambda:ListFunctions
                  - lambda:ListEventSourceMappings
                  - lambda:GetFunctionConfiguration
                  - resource-groups:ListGroups
                  - resource-groups:ListGroupResources
                  - resource-groups:GetGroup
                  - resource-groups:GetGroupQuery
                  - tag:GetResources
                  - kinesis:ListStreams
                  - kinesis:DescribeStream
                  - kinesis:DescribeStreamSummary
                Resource: '*'
              - Effect: Allow
                Action: 
                  - cloudwatch:GetInsightRuleReport
                Resource: arn:aws:cloudwatch:*:*:insight-rule/DynamoDBContributorInsights*
              - Effect: Allow
                Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents   
                Resource: "*"
  
  Lambdafunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Description: 'api invoke query dynamodb'
      FunctionName: 'apidynamodb'
      Role: !GetAtt lambdarole.Arn 
      Runtime: 'python3.7'  #need to declare if using zipfile and entering code in template
      Code:
        ZipFile:  |

          import json
          import boto3
          from boto3.dynamodb.conditions import key

          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table('Movies')

          def lambda_handler(event, context):
              response = table.query(
                  IndexName='string',
                  Select='ALL_ATTRIBUTES',
                  Limit=15,
                  ScanIndexForward=True,
                  ReturnConsumedCapacity='NONE',
                  ProjectionExpression='string',
                  KeyConditionExpression=Key('year').eq('2013'),
              )
              return response['Items']

  APIGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties: 
      Description: API to invoke Lambda 
      Name: HttpApi
      ProtocolType: HTTP
      #RouteSelectionExpression: ${request.method} ${request.path}
      Target: !GetAtt Lambdafunction.Arn

Outputs:
  ApiEndpoint:
    Description: Url to invoke API 
    Value: !GetAtt APIGateway.ApiEndpoint 


      





